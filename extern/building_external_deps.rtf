{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Openframeworks leaves it to be a bit of a mystery as to how the external libraries were built. Since I brought things up to 64bit/c++11 in my own project, I figured I'd document it in the hopes that it would be a bit easier for someone else.\
\
External libs are built with jhbuild (https://live.gnome.org/Jhbuild), installed to ~/gtk. It ended up being a pretty decent way of wrangling all the external dependencies, and building for specific configurations independent of the local platform, so I just went with it. It could be adapted to be set up within the Openframeworks tree and deploy there, but I didn't get that far.\
\
Everything that doesn't come from jhbuild needs to be configured with (at a minimum):\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 --prefix=~/gtk/inst\
\
Specific libs need the following configs:\
\
flac:\
--prefix=~/gtk/inst --disable-3dnow --disable-altivec --enable-sse --disable-asm-optimizations\
\
assimp:\
cmake -DASSIMP_ENABLE_BOOST_WORKAROUND=ON -DCMAKE_INSTALL_PREFIX:PATH=~/gtk/inst -DASSIMP_BUILD_STATIC_LIB=ON .\
\
OpenCV:\
cmake -DCMAKE_INSTALL_PREFIX:PATH=~/gtk/inst -DBUILD_SHARED_LIBS=OFF -DBUILD_opencv_apps=OFF -DBUILD_DOCS=OFF -DBUILD_PACKAGE=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DBUILD_ZLIB=OFF -DBUILD_TIFF=OFF  -DBUILD_JPEG=OFF -DBUILD_PNG=OFF -DBUILD_OPENEXR=OFF .\
-D=OFF\
\
**Do not build poco in the jhbuild shell**\
Poco config:\
./configure --static --no-tests --no-samples --omit=NetSSL_OpenSSL,Crypto,Data/ODBC,Data/MySQL --config=Darwin64-clang-libc++ --prefix=~/gtk/inst\
\
After all this is done, it should be possible to use the build_and_deploy_extern_libs.sh to put everything in the right place.}